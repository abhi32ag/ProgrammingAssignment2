Data = read.csv(/Users/abhi/Desktop/hotel.txt)
Data = read.csv("/Users/abhi/Desktop/hotel.txt")
View(Data)
View(Data)
Data.features$Type.of.Room <- NULL
Data.features = Data
Data.features$Type.of.Room <- NULL
View(Data.features)
kmeans(Data.features, 3)
Data.features <- subset(Data,select = c("Customer.Age","Number.of.days.Stay"))
Data = read.csv("/Users/abhi/Desktop/hotel.txt")
Data.features <- subset(Data,select = c("Customer.Age","Number.of.days.Stay"))
kmeans(Data.features,3)
results <- kmeans(Data.features,3)
results
View(Data.features)
View(Data.features)
results$cluster
result <- kmeans(Data.features$Customer.Age,3)
results
result
plot(Data[c("Customer.Age")],col=result$cluster)
plot(Data[c("Customer.Age","Number.of.days.Stay")],col=result$cluster)
con <- file("code.log")
sink(con,append=TRUE)
sink(con, append=TRUE, type="message")
sink()
sink(type="message")
cat(readLines("code.log"),sep="\n")
Data.features
k = kmeans(Data.features,3)
k
k$cluster
plot(Data[c("Number.of.days.Stay, "Customer.Age"")], col = k$cluster)
plot(Data[c("Number.of.days.Stay", "Customer.Age")], col = k$cluster)
clc
clear
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
Data.features
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
k$cluster
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
k
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
install.packages("KernSmooth")
library(KernSmooth)
ls
rm(list=ls())
ls
source('~/Rprogramming/Assignment/pollutantmean.R')
ls
rm(list = ls())
mydata = rnorm(100)
sd(mydata)
sd( x = mydata)
sd(na.rm = FALSE, x = mydata)
lm(data=mydata, y-x, model=FALSE, 1:100)
y<- 10
f <- function(x){}
f <- function(x){ y<- 2
y^2 +g(x)}
g<- function(x){
x*y
}
f(3)
x <- as.POSIXct("2012-10-25 01:00:00")
y <- as.POSIXct("2012-10-25 06:00:00", tz="GMT")
y-x
unclass(x)
x
x <- list(a = 1:5, b = rnorm(10))
x
x$a
x$b
x[1]
x[2]
lapply(x,mean)
rm(list=ls())
ls
ls(environment)
?runif
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
f
tapply(x,f,mean)
as.list(tapply(x,f, mean))
tapply(x,f,range)
split(x,f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]), na.rm = TRUE)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm= TRUE))
split(airquality, list(airquality$Month,airquality$Temp))
split(airquality, list(airquality$Month,airquality$Temp), drop=TRUE)
rm(list=ls())
log(-1)
printmessage <- function(x) {
if(x<0)
print("x is greater")
else
print("x is less")
invisible(x)
}
printmessage(5)
lm(y ~ x)
debug(lm)
lm(y ~ x)
library(datasets)
data(iris)
?iris
head(iris)
lapple(iris$Sepal.Length, mean)
lapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, function(x) colMeans(x = "iris$Sepal.Length"))
s <- split(iris$Sepal.Length, iris$Species = "virginica")
s <- split(iris$Sepal.Length, iris$Species)
s
s$virginica
sapply(s$virginica, mean)
lappy(s$virginica, mean)
lapply(s$virginica, mean)
sapply(s$virginica, function(x) rowMeans(x))
s$virginica
p <- as.vector(s$virginica)
p
sappl(p, mean)
apply(p, mean)
sapply(p, mean)
rowMeans(p)
as.matrix(p)
p <- as.matrix(p)
rowMeans(p)
colMeans(p)
data <- iris
data
apply(iris[,1:4], 2, mean)
data(mtcars)
data <- mtcars
?mtcars
head(data)
?tapply
tapply(mtcars$mpg,mtcars$cyl, mean )
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
s <- split(mtcars$mpg, mtcars$cyl)
sapply(s, mean)
apply(mtcars, 2, mean)
?mtcars
s <- split(mtcars$hp, mtcars$cyl)
s
apply(s,s$4,mean)
sapply(s,mean)
test <- sapply(s, mean)
test
difference <- abs(test[1] - test[3])
difference
debug(ls)
ls()
data(iris)
s <- split(iris$Sepal.Length, iris$Species)
library(datasets)
data(iris)
s<- split(iris$Sepal.Length, iris$Species)
s
sapply(s$virginica, mean)
a <- as.matrix(s$virginica)
a
rowMeans(a)
colMeans(a)
m <- round(colMeans(a))
m
apply(iris[,1:4],2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
library(mtcars)
data(mtcars)
data <- mtcars
data
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg,cyl,mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
tapply(data, mtcars$cyl, mean)
tapply(mtcars, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
t <- tappl(mtcars$hp, mtcars$cyl, mean)
t <- tapply(mtcars$hp, mtcars$cyl, mean)
t
m <- round(abs(t[1]-t[3]))
m
t
a <- abs(t[1] - t[3])
a
wd
getwd()
setwd(c(getwd(),"/Rprogramming/Assignment2")
ls
getwd()
setwd(/Users/abhi/Rprogramming/Assignment2)
setwd("/Users/abhi/Rprogramming/Assignment2")
getwd()
ls
ls(getwd)
source("ProgrammingAssignment2.R")
source("ProgrammingAssignment2.R")
matrix <- matrix(rnorm(3*3),3,3)
matrix
cacheSolve(matrix)
?solve
matrix <- matrix(rnorm(3*3),3,3)
matrix
makeCacheMatrix(matrix)
cacheSolve(matrix)
cacheSolve(matrix)
setwd("/Users/abhi/ProgrammingAssignment2")
source("cachematrix.R")
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2))
a
summary(a)
a$get()
cacheSolve(a)
